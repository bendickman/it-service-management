@using IT.Service.Management.UI.Client.Components.ConfirmationDialog;
@using IT.Service.Management.UI.Client.Services;
@using IT.Service.Management.UI.Shared.Models;
@inject IClientTicketService TicketService;

<h3>Your Tickets</h3>

<div class="mt-3 mb-2">
    <a href="/ticket/create" class="btn btn-md btn-success">Create</a>
</div>

@if (_tickets?.Any() ?? false)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Title</th>
                <th scope="col">Created</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticket in _tickets.OrderBy(t => t.CreatedDate))
            {
                <tr>
                    <td>@ticket.Title</td>
                    @if (ticket.HasUpdatedDate)
                    {
                        <td>@ticket.UpdatedDate!.Value.ToString("dd MMM yyyy H:mm")</td>
                    }
                    else
                    {
                        <td>@ticket.CreatedDate.ToString("dd MMM yyyy H:mm")</td>
                    }
                    <td>
                        <a href="/ticket/@(ticket.Id)"><i class="bi bi-eye fs-4 mx-1"></i></a>
                        <a href="/ticket/update/@(ticket.Id)"><i class="bi bi-pencil fs-4 text-warning mx-1"></i></a>
                        <a style="cursor: pointer" @onclick="() => ConfirmDelete(ticket.Id)"><i class="bi bi-trash fs-4 text-danger mx-1"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (ShowConfirmationDialog)
{
    <ConfirmationDialogComponent 
        Class="btn btn-sm btn-danger"
        Title="Confirm Delete"
        Message="Are you sure you want to delete this ticket?"
        ConfirmedChanged="Confirmation">
    </ConfirmationDialogComponent>
}

@code {
    private bool ShowConfirmationDialog;

    private Guid ToBeDeleted;

    private List<Ticket> _tickets = Enumerable.Empty<Ticket>().ToList();

    protected override async Task OnInitializedAsync()
    {
        _tickets = (await TicketService.ListTicketsAsync()).ToList();
    }

    private void ConfirmDelete(Guid ticketId)
    {
        ToBeDeleted = ticketId;
        ShowConfirmationDialog = true;
    }

    private async Task Confirmation(bool result)
    {
        ShowConfirmationDialog = false;
        if (!result)
        {
            return;
        }

        _tickets.Remove(_tickets.Single(t => t.Id == ToBeDeleted));
        await TicketService.DeleteTicketAsync(ToBeDeleted);
    }
}
