@using IT.Service.Management.UI.Client.Components.Utility;
@using IT.Service.Management.UI.Client.Services;
@using IT.Service.Management.UI.Shared.Models;
@inject IClientTicketService _ticketService;

<h3>Tickets</h3>

<div class="mt-3 mb-2">
    <a href="/ticket/add" class="btn btn-md btn-success">Create Ticket</a>
</div>

@if (_tickets?.Any() ?? false)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Title</th>
                <th scope="col">Created</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticket in _tickets.OrderBy(t => t.createdDate))
            {
                <tr>
                    <th scope="row">@ticket.title</th>
                    <td>@ticket.createdDate.ToString("dd MMM yyyy")</td>
                    <td>
                        <a class="btn btn-sm btn-info" href="/ticket/@(ticket.id)">Edit</a>
                        <ConfirmationDialogComponent
                            Class="btn btn-sm btn-danger"
                            Title="Delete"
                            ConfirmedChanged="Confirmation"
                            SetSelectedValue="Selection"></ConfirmationDialogComponent>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Ticket> _tickets = Enumerable.Empty<Ticket>();

    public Guid SelectedTicketId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _tickets = await _ticketService.ListTicketsAsync();
    }

    public async Task Selection(Guid id)
    {
        SelectedTicketId = id;
    }

    public async Task Confirmation(bool result)
    {
        if (!result)
        {
            return;
        }
    }
}
